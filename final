New one


interface IVehicle {
  id: number;
  type: string;
  brand: string;
}

class VehicleManager {
  private vehicles: IVehicle[] = [];
  private vehicleTypes: string[] = [];

  addNewVehicleType(type: string) {
    if (!this.vehicleTypes.includes(type)) {
      this.vehicleTypes.push(type);
      console.log(`New vehicle type "${type}" added.`);
    } else {
      console.log(`Vehicle type "${type}" already exists.`);
    }
  }

  displayVehicleTypes() {
    console.log('Vehicle Types:');
    this.vehicleTypes.forEach((type, index) => {
      console.log(`ID: ${index + 1}, Type: ${type}`);
    });
  }

  addVehicleDetails(typeId: number, brand: string) {
    if (typeId > 0 && typeId <= this.vehicleTypes.length) {
      const type = this.vehicleTypes[typeId - 1];
      this.vehicles.push({ id: this.vehicles.length + 1, type, brand });
      console.log(`Vehicle details added: Type: ${type}, Brand: ${brand}`);
    } else {
      console.log('Invalid vehicle type ID. Please check the ID.');
    }
  }

  displayAllVehicleDetails() {
    console.log('All Vehicle Details:');
    this.vehicles.forEach((vehicle) => {
      console.log(`ID: ${vehicle.id}, Type: ${vehicle.type}, Brand: ${vehicle.brand}`);
    });
  }
}

const manager = new VehicleManager();

manager.addNewVehicleType('Car');
manager.addNewVehicleType('Motorcycle');
manager.displayVehicleTypes();

manager.addVehicleDetails(1, 'Toyota');
manager.addVehicleDetails(2, 'Harley-Davidson');
manager.addVehicleDetails(1, 'Ford');
manager.addVehicleDetails(2, 'Suzuki');

manager.displayAllVehicleDetails();
